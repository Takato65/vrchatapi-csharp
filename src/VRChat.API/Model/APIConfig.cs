/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.16.7
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// APIConfig
    /// </summary>
    [DataContract(Name = "APIConfig")]
    public partial class APIConfig : IEquatable<APIConfig>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DeploymentGroup
        /// </summary>
        [DataMember(Name = "deploymentGroup", IsRequired = true, EmitDefaultValue = true)]
        public DeploymentGroup DeploymentGroup { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected APIConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="APIConfig" /> class.
        /// </summary>
        /// <param name="voiceEnableDegradation">Unknown, probably voice optimization testing (required) (default to false).</param>
        /// <param name="voiceEnableReceiverLimiting">Unknown, probably voice optimization testing (required) (default to true).</param>
        /// <param name="address">VRChat&#39;s office address (required).</param>
        /// <param name="announcements">Public Announcements (required).</param>
        /// <param name="appName">Game name (required) (default to &quot;VrChat&quot;).</param>
        /// <param name="buildVersionTag">Build tag of the API server (required).</param>
        /// <param name="clientApiKey">apiKey to be used for all other requests (required).</param>
        /// <param name="clientBPSCeiling">Unknown (required) (default to 18432).</param>
        /// <param name="clientDisconnectTimeout">Unknown (required) (default to 30000).</param>
        /// <param name="clientReservedPlayerBPS">Unknown (required) (default to 7168).</param>
        /// <param name="clientSentCountAllowance">Unknown (required) (default to 15).</param>
        /// <param name="contactEmail">VRChat&#39;s contact email (required).</param>
        /// <param name="copyrightEmail">VRChat&#39;s copyright-issues-related email (required).</param>
        /// <param name="currentTOSVersion">Current version number of the Terms of Service (required).</param>
        /// <param name="defaultAvatar">defaultAvatar (required).</param>
        /// <param name="deploymentGroup">deploymentGroup (required).</param>
        /// <param name="devAppVersionStandalone">Version number for game development build (required).</param>
        /// <param name="devDownloadLinkWindows">Developer Download link (required).</param>
        /// <param name="devSdkUrl">Link to download the development SDK, use downloadUrls instead (required).</param>
        /// <param name="devSdkVersion">Version of the development SDK (required).</param>
        /// <param name="devServerVersionStandalone">Version number for server development build (required).</param>
        /// <param name="disCountdown">Unknown, \&quot;dis\&quot; maybe for disconnect? (required).</param>
        /// <param name="disableAvatarCopying">Toggles if copying avatars should be disabled (required) (default to false).</param>
        /// <param name="disableAvatarGating">Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag (required) (default to false).</param>
        /// <param name="disableCommunityLabs">Toggles if the Community Labs should be disabled (required) (default to false).</param>
        /// <param name="disableCommunityLabsPromotion">Toggles if promotion out of Community Labs should be disabled (required) (default to false).</param>
        /// <param name="disableEmail">Unknown (required) (default to false).</param>
        /// <param name="disableEventStream">Toggles if Analytics should be disabled. (required) (default to false).</param>
        /// <param name="disableFeedbackGating">Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag. (required) (default to false).</param>
        /// <param name="disableFrontendBuilds">Unknown, probably toggles compilation of frontend web builds? So internal flag? (required) (default to false).</param>
        /// <param name="disableHello">Unknown (required) (default to false).</param>
        /// <param name="disableOculusSubs">Toggles if signing up for Subscriptions in Oculus is disabled or not. (required) (default to false).</param>
        /// <param name="disableRegistration">Toggles if new user account registration should be disabled. (required) (default to false).</param>
        /// <param name="disableSteamNetworking">Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead. (required) (default to true).</param>
        /// <param name="disableTwoFactorAuth">Toggles if 2FA should be disabled. (required) (default to false).</param>
        /// <param name="disableUdon">Toggles if Udon should be universally disabled in-game. (required) (default to false).</param>
        /// <param name="disableUpgradeAccount">Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled. (required) (default to false).</param>
        /// <param name="downloadLinkWindows">Download link for game on the Oculus Rift website. (required).</param>
        /// <param name="downloadUrls">downloadUrls (required).</param>
        /// <param name="dynamicWorldRows">Array of DynamicWorldRow objects, used by the game to display the list of world rows (required).</param>
        /// <param name="events">events (required).</param>
        /// <param name="gearDemoRoomId">Unknown (required).</param>
        /// <param name="homeWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="homepageRedirectTarget">Redirect target if you try to open the base API domain in your browser (required) (default to &quot;https://hello.vrchat.com&quot;).</param>
        /// <param name="hubWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="jobsEmail">VRChat&#39;s job application email (required).</param>
        /// <param name="messageOfTheDay">MOTD (required).</param>
        /// <param name="moderationEmail">VRChat&#39;s moderation related email (required).</param>
        /// <param name="moderationQueryPeriod">Unknown (required).</param>
        /// <param name="notAllowedToSelectAvatarInPrivateWorldMessage">Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds (required).</param>
        /// <param name="plugin">Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance (required).</param>
        /// <param name="releaseAppVersionStandalone">Version number for game release build (required).</param>
        /// <param name="releaseSdkUrl">Link to download the release SDK (required).</param>
        /// <param name="releaseSdkVersion">Version of the release SDK (required).</param>
        /// <param name="releaseServerVersionStandalone">Version number for server release build (required).</param>
        /// <param name="sdkDeveloperFaqUrl">Link to the developer FAQ (required).</param>
        /// <param name="sdkDiscordUrl">Link to the official VRChat Discord (required).</param>
        /// <param name="sdkNotAllowedToPublishMessage">Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet (required).</param>
        /// <param name="sdkUnityVersion">Unity version supported by the SDK (required).</param>
        /// <param name="serverName">Server name of the API server currently responding (required).</param>
        /// <param name="supportEmail">VRChat&#39;s support email (required).</param>
        /// <param name="timeOutWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="tutorialWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
        /// <param name="updateRateMsMaximum">Unknown (required).</param>
        /// <param name="updateRateMsMinimum">Unknown (required).</param>
        /// <param name="updateRateMsNormal">Unknown (required).</param>
        /// <param name="updateRateMsUdonManual">Unknown (required).</param>
        /// <param name="uploadAnalysisPercent">Unknown (required).</param>
        /// <param name="urlList">List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game (required).</param>
        /// <param name="useReliableUdpForVoice">Unknown (required) (default to false).</param>
        /// <param name="userUpdatePeriod">Unknown (required).</param>
        /// <param name="userVerificationDelay">Unknown (required).</param>
        /// <param name="userVerificationRetry">Unknown (required).</param>
        /// <param name="userVerificationTimeout">Unknown (required).</param>
        /// <param name="viveWindowsUrl">Download link for game on the Steam website. (required).</param>
        /// <param name="whiteListedAssetUrls">List of allowed URLs that are allowed to host avatar assets (required).</param>
        /// <param name="worldUpdatePeriod">Unknown (required).</param>
        /// <param name="playerUrlResolverHash">Currently used youtube-dl.exe hash in SHA-256-delimited format (required).</param>
        /// <param name="playerUrlResolverVersion">Currently used youtube-dl.exe version (required).</param>
        public APIConfig(bool voiceEnableDegradation = false, bool voiceEnableReceiverLimiting = true, string address = default(string), List<APIConfigAnnouncement> announcements = default(List<APIConfigAnnouncement>), string appName = "VrChat", string buildVersionTag = default(string), string clientApiKey = default(string), int clientBPSCeiling = 18432, int clientDisconnectTimeout = 30000, int clientReservedPlayerBPS = 7168, int clientSentCountAllowance = 15, string contactEmail = default(string), string copyrightEmail = default(string), int currentTOSVersion = default(int), string defaultAvatar = default(string), DeploymentGroup deploymentGroup = default(DeploymentGroup), string devAppVersionStandalone = default(string), string devDownloadLinkWindows = default(string), string devSdkUrl = default(string), string devSdkVersion = default(string), string devServerVersionStandalone = default(string), DateTime disCountdown = default(DateTime), bool disableAvatarCopying = false, bool disableAvatarGating = false, bool disableCommunityLabs = false, bool disableCommunityLabsPromotion = false, bool disableEmail = false, bool disableEventStream = false, bool disableFeedbackGating = false, bool disableFrontendBuilds = false, bool disableHello = false, bool disableOculusSubs = false, bool disableRegistration = false, bool disableSteamNetworking = true, bool disableTwoFactorAuth = false, bool disableUdon = false, bool disableUpgradeAccount = false, string downloadLinkWindows = default(string), APIConfigDownloadURLList downloadUrls = default(APIConfigDownloadURLList), List<DynamicContentRow> dynamicWorldRows = default(List<DynamicContentRow>), APIConfigEvents events = default(APIConfigEvents), string gearDemoRoomId = default(string), string homeWorldId = default(string), string homepageRedirectTarget = "https://hello.vrchat.com", string hubWorldId = default(string), string jobsEmail = default(string), string messageOfTheDay = default(string), string moderationEmail = default(string), int moderationQueryPeriod = default(int), string notAllowedToSelectAvatarInPrivateWorldMessage = default(string), string plugin = default(string), string releaseAppVersionStandalone = default(string), string releaseSdkUrl = default(string), string releaseSdkVersion = default(string), string releaseServerVersionStandalone = default(string), string sdkDeveloperFaqUrl = default(string), string sdkDiscordUrl = default(string), string sdkNotAllowedToPublishMessage = default(string), string sdkUnityVersion = default(string), string serverName = default(string), string supportEmail = default(string), string timeOutWorldId = default(string), string tutorialWorldId = default(string), int updateRateMsMaximum = default(int), int updateRateMsMinimum = default(int), int updateRateMsNormal = default(int), int updateRateMsUdonManual = default(int), int uploadAnalysisPercent = default(int), List<string> urlList = default(List<string>), bool useReliableUdpForVoice = false, int userUpdatePeriod = default(int), int userVerificationDelay = default(int), int userVerificationRetry = default(int), int userVerificationTimeout = default(int), string viveWindowsUrl = default(string), List<string> whiteListedAssetUrls = default(List<string>), int worldUpdatePeriod = default(int), string playerUrlResolverHash = default(string), string playerUrlResolverVersion = default(string))
        {
            this.VoiceEnableDegradation = voiceEnableDegradation;
            this.VoiceEnableReceiverLimiting = voiceEnableReceiverLimiting;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for APIConfig and cannot be null");
            }
            this.Address = address;
            // to ensure "announcements" is required (not null)
            if (announcements == null)
            {
                throw new ArgumentNullException("announcements is a required property for APIConfig and cannot be null");
            }
            this.Announcements = announcements;
            // to ensure "appName" is required (not null)
            if (appName == null)
            {
                throw new ArgumentNullException("appName is a required property for APIConfig and cannot be null");
            }
            this.AppName = appName;
            // to ensure "buildVersionTag" is required (not null)
            if (buildVersionTag == null)
            {
                throw new ArgumentNullException("buildVersionTag is a required property for APIConfig and cannot be null");
            }
            this.BuildVersionTag = buildVersionTag;
            // to ensure "clientApiKey" is required (not null)
            if (clientApiKey == null)
            {
                throw new ArgumentNullException("clientApiKey is a required property for APIConfig and cannot be null");
            }
            this.ClientApiKey = clientApiKey;
            this.ClientBPSCeiling = clientBPSCeiling;
            this.ClientDisconnectTimeout = clientDisconnectTimeout;
            this.ClientReservedPlayerBPS = clientReservedPlayerBPS;
            this.ClientSentCountAllowance = clientSentCountAllowance;
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new ArgumentNullException("contactEmail is a required property for APIConfig and cannot be null");
            }
            this.ContactEmail = contactEmail;
            // to ensure "copyrightEmail" is required (not null)
            if (copyrightEmail == null)
            {
                throw new ArgumentNullException("copyrightEmail is a required property for APIConfig and cannot be null");
            }
            this.CopyrightEmail = copyrightEmail;
            this.CurrentTOSVersion = currentTOSVersion;
            // to ensure "defaultAvatar" is required (not null)
            if (defaultAvatar == null)
            {
                throw new ArgumentNullException("defaultAvatar is a required property for APIConfig and cannot be null");
            }
            this.DefaultAvatar = defaultAvatar;
            this.DeploymentGroup = deploymentGroup;
            // to ensure "devAppVersionStandalone" is required (not null)
            if (devAppVersionStandalone == null)
            {
                throw new ArgumentNullException("devAppVersionStandalone is a required property for APIConfig and cannot be null");
            }
            this.DevAppVersionStandalone = devAppVersionStandalone;
            // to ensure "devDownloadLinkWindows" is required (not null)
            if (devDownloadLinkWindows == null)
            {
                throw new ArgumentNullException("devDownloadLinkWindows is a required property for APIConfig and cannot be null");
            }
            this.DevDownloadLinkWindows = devDownloadLinkWindows;
            // to ensure "devSdkUrl" is required (not null)
            if (devSdkUrl == null)
            {
                throw new ArgumentNullException("devSdkUrl is a required property for APIConfig and cannot be null");
            }
            this.DevSdkUrl = devSdkUrl;
            // to ensure "devSdkVersion" is required (not null)
            if (devSdkVersion == null)
            {
                throw new ArgumentNullException("devSdkVersion is a required property for APIConfig and cannot be null");
            }
            this.DevSdkVersion = devSdkVersion;
            // to ensure "devServerVersionStandalone" is required (not null)
            if (devServerVersionStandalone == null)
            {
                throw new ArgumentNullException("devServerVersionStandalone is a required property for APIConfig and cannot be null");
            }
            this.DevServerVersionStandalone = devServerVersionStandalone;
            this.DisCountdown = disCountdown;
            this.DisableAvatarCopying = disableAvatarCopying;
            this.DisableAvatarGating = disableAvatarGating;
            this.DisableCommunityLabs = disableCommunityLabs;
            this.DisableCommunityLabsPromotion = disableCommunityLabsPromotion;
            this.DisableEmail = disableEmail;
            this.DisableEventStream = disableEventStream;
            this.DisableFeedbackGating = disableFeedbackGating;
            this.DisableFrontendBuilds = disableFrontendBuilds;
            this.DisableHello = disableHello;
            this.DisableOculusSubs = disableOculusSubs;
            this.DisableRegistration = disableRegistration;
            this.DisableSteamNetworking = disableSteamNetworking;
            this.DisableTwoFactorAuth = disableTwoFactorAuth;
            this.DisableUdon = disableUdon;
            this.DisableUpgradeAccount = disableUpgradeAccount;
            // to ensure "downloadLinkWindows" is required (not null)
            if (downloadLinkWindows == null)
            {
                throw new ArgumentNullException("downloadLinkWindows is a required property for APIConfig and cannot be null");
            }
            this.DownloadLinkWindows = downloadLinkWindows;
            // to ensure "downloadUrls" is required (not null)
            if (downloadUrls == null)
            {
                throw new ArgumentNullException("downloadUrls is a required property for APIConfig and cannot be null");
            }
            this.DownloadUrls = downloadUrls;
            // to ensure "dynamicWorldRows" is required (not null)
            if (dynamicWorldRows == null)
            {
                throw new ArgumentNullException("dynamicWorldRows is a required property for APIConfig and cannot be null");
            }
            this.DynamicWorldRows = dynamicWorldRows;
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new ArgumentNullException("events is a required property for APIConfig and cannot be null");
            }
            this.Events = events;
            // to ensure "gearDemoRoomId" is required (not null)
            if (gearDemoRoomId == null)
            {
                throw new ArgumentNullException("gearDemoRoomId is a required property for APIConfig and cannot be null");
            }
            this.GearDemoRoomId = gearDemoRoomId;
            // to ensure "homeWorldId" is required (not null)
            if (homeWorldId == null)
            {
                throw new ArgumentNullException("homeWorldId is a required property for APIConfig and cannot be null");
            }
            this.HomeWorldId = homeWorldId;
            // to ensure "homepageRedirectTarget" is required (not null)
            if (homepageRedirectTarget == null)
            {
                throw new ArgumentNullException("homepageRedirectTarget is a required property for APIConfig and cannot be null");
            }
            this.HomepageRedirectTarget = homepageRedirectTarget;
            // to ensure "hubWorldId" is required (not null)
            if (hubWorldId == null)
            {
                throw new ArgumentNullException("hubWorldId is a required property for APIConfig and cannot be null");
            }
            this.HubWorldId = hubWorldId;
            // to ensure "jobsEmail" is required (not null)
            if (jobsEmail == null)
            {
                throw new ArgumentNullException("jobsEmail is a required property for APIConfig and cannot be null");
            }
            this.JobsEmail = jobsEmail;
            // to ensure "messageOfTheDay" is required (not null)
            if (messageOfTheDay == null)
            {
                throw new ArgumentNullException("messageOfTheDay is a required property for APIConfig and cannot be null");
            }
            this.MessageOfTheDay = messageOfTheDay;
            // to ensure "moderationEmail" is required (not null)
            if (moderationEmail == null)
            {
                throw new ArgumentNullException("moderationEmail is a required property for APIConfig and cannot be null");
            }
            this.ModerationEmail = moderationEmail;
            this.ModerationQueryPeriod = moderationQueryPeriod;
            // to ensure "notAllowedToSelectAvatarInPrivateWorldMessage" is required (not null)
            if (notAllowedToSelectAvatarInPrivateWorldMessage == null)
            {
                throw new ArgumentNullException("notAllowedToSelectAvatarInPrivateWorldMessage is a required property for APIConfig and cannot be null");
            }
            this.NotAllowedToSelectAvatarInPrivateWorldMessage = notAllowedToSelectAvatarInPrivateWorldMessage;
            // to ensure "plugin" is required (not null)
            if (plugin == null)
            {
                throw new ArgumentNullException("plugin is a required property for APIConfig and cannot be null");
            }
            this.Plugin = plugin;
            // to ensure "releaseAppVersionStandalone" is required (not null)
            if (releaseAppVersionStandalone == null)
            {
                throw new ArgumentNullException("releaseAppVersionStandalone is a required property for APIConfig and cannot be null");
            }
            this.ReleaseAppVersionStandalone = releaseAppVersionStandalone;
            // to ensure "releaseSdkUrl" is required (not null)
            if (releaseSdkUrl == null)
            {
                throw new ArgumentNullException("releaseSdkUrl is a required property for APIConfig and cannot be null");
            }
            this.ReleaseSdkUrl = releaseSdkUrl;
            // to ensure "releaseSdkVersion" is required (not null)
            if (releaseSdkVersion == null)
            {
                throw new ArgumentNullException("releaseSdkVersion is a required property for APIConfig and cannot be null");
            }
            this.ReleaseSdkVersion = releaseSdkVersion;
            // to ensure "releaseServerVersionStandalone" is required (not null)
            if (releaseServerVersionStandalone == null)
            {
                throw new ArgumentNullException("releaseServerVersionStandalone is a required property for APIConfig and cannot be null");
            }
            this.ReleaseServerVersionStandalone = releaseServerVersionStandalone;
            // to ensure "sdkDeveloperFaqUrl" is required (not null)
            if (sdkDeveloperFaqUrl == null)
            {
                throw new ArgumentNullException("sdkDeveloperFaqUrl is a required property for APIConfig and cannot be null");
            }
            this.SdkDeveloperFaqUrl = sdkDeveloperFaqUrl;
            // to ensure "sdkDiscordUrl" is required (not null)
            if (sdkDiscordUrl == null)
            {
                throw new ArgumentNullException("sdkDiscordUrl is a required property for APIConfig and cannot be null");
            }
            this.SdkDiscordUrl = sdkDiscordUrl;
            // to ensure "sdkNotAllowedToPublishMessage" is required (not null)
            if (sdkNotAllowedToPublishMessage == null)
            {
                throw new ArgumentNullException("sdkNotAllowedToPublishMessage is a required property for APIConfig and cannot be null");
            }
            this.SdkNotAllowedToPublishMessage = sdkNotAllowedToPublishMessage;
            // to ensure "sdkUnityVersion" is required (not null)
            if (sdkUnityVersion == null)
            {
                throw new ArgumentNullException("sdkUnityVersion is a required property for APIConfig and cannot be null");
            }
            this.SdkUnityVersion = sdkUnityVersion;
            // to ensure "serverName" is required (not null)
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName is a required property for APIConfig and cannot be null");
            }
            this.ServerName = serverName;
            // to ensure "supportEmail" is required (not null)
            if (supportEmail == null)
            {
                throw new ArgumentNullException("supportEmail is a required property for APIConfig and cannot be null");
            }
            this.SupportEmail = supportEmail;
            // to ensure "timeOutWorldId" is required (not null)
            if (timeOutWorldId == null)
            {
                throw new ArgumentNullException("timeOutWorldId is a required property for APIConfig and cannot be null");
            }
            this.TimeOutWorldId = timeOutWorldId;
            // to ensure "tutorialWorldId" is required (not null)
            if (tutorialWorldId == null)
            {
                throw new ArgumentNullException("tutorialWorldId is a required property for APIConfig and cannot be null");
            }
            this.TutorialWorldId = tutorialWorldId;
            this.UpdateRateMsMaximum = updateRateMsMaximum;
            this.UpdateRateMsMinimum = updateRateMsMinimum;
            this.UpdateRateMsNormal = updateRateMsNormal;
            this.UpdateRateMsUdonManual = updateRateMsUdonManual;
            this.UploadAnalysisPercent = uploadAnalysisPercent;
            // to ensure "urlList" is required (not null)
            if (urlList == null)
            {
                throw new ArgumentNullException("urlList is a required property for APIConfig and cannot be null");
            }
            this.UrlList = urlList;
            this.UseReliableUdpForVoice = useReliableUdpForVoice;
            this.UserUpdatePeriod = userUpdatePeriod;
            this.UserVerificationDelay = userVerificationDelay;
            this.UserVerificationRetry = userVerificationRetry;
            this.UserVerificationTimeout = userVerificationTimeout;
            // to ensure "viveWindowsUrl" is required (not null)
            if (viveWindowsUrl == null)
            {
                throw new ArgumentNullException("viveWindowsUrl is a required property for APIConfig and cannot be null");
            }
            this.ViveWindowsUrl = viveWindowsUrl;
            // to ensure "whiteListedAssetUrls" is required (not null)
            if (whiteListedAssetUrls == null)
            {
                throw new ArgumentNullException("whiteListedAssetUrls is a required property for APIConfig and cannot be null");
            }
            this.WhiteListedAssetUrls = whiteListedAssetUrls;
            this.WorldUpdatePeriod = worldUpdatePeriod;
            // to ensure "playerUrlResolverHash" is required (not null)
            if (playerUrlResolverHash == null)
            {
                throw new ArgumentNullException("playerUrlResolverHash is a required property for APIConfig and cannot be null");
            }
            this.PlayerUrlResolverHash = playerUrlResolverHash;
            // to ensure "playerUrlResolverVersion" is required (not null)
            if (playerUrlResolverVersion == null)
            {
                throw new ArgumentNullException("playerUrlResolverVersion is a required property for APIConfig and cannot be null");
            }
            this.PlayerUrlResolverVersion = playerUrlResolverVersion;
        }

        /// <summary>
        /// Unknown, probably voice optimization testing
        /// </summary>
        /// <value>Unknown, probably voice optimization testing</value>
        [DataMember(Name = "VoiceEnableDegradation", IsRequired = true, EmitDefaultValue = true)]
        public bool VoiceEnableDegradation { get; set; }

        /// <summary>
        /// Unknown, probably voice optimization testing
        /// </summary>
        /// <value>Unknown, probably voice optimization testing</value>
        [DataMember(Name = "VoiceEnableReceiverLimiting", IsRequired = true, EmitDefaultValue = true)]
        public bool VoiceEnableReceiverLimiting { get; set; }

        /// <summary>
        /// VRChat&#39;s office address
        /// </summary>
        /// <value>VRChat&#39;s office address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Public Announcements
        /// </summary>
        /// <value>Public Announcements</value>
        [DataMember(Name = "announcements", IsRequired = true, EmitDefaultValue = true)]
        public List<APIConfigAnnouncement> Announcements { get; set; }

        /// <summary>
        /// Game name
        /// </summary>
        /// <value>Game name</value>
        [DataMember(Name = "appName", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string AppName { get; set; }

        /// <summary>
        /// Build tag of the API server
        /// </summary>
        /// <value>Build tag of the API server</value>
        [DataMember(Name = "buildVersionTag", IsRequired = true, EmitDefaultValue = true)]
        public string BuildVersionTag { get; set; }

        /// <summary>
        /// apiKey to be used for all other requests
        /// </summary>
        /// <value>apiKey to be used for all other requests</value>
        [DataMember(Name = "clientApiKey", IsRequired = true, EmitDefaultValue = true)]
        public string ClientApiKey { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientBPSCeiling", IsRequired = true, EmitDefaultValue = true)]
        public int ClientBPSCeiling { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientDisconnectTimeout", IsRequired = true, EmitDefaultValue = true)]
        public int ClientDisconnectTimeout { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientReservedPlayerBPS", IsRequired = true, EmitDefaultValue = true)]
        public int ClientReservedPlayerBPS { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "clientSentCountAllowance", IsRequired = true, EmitDefaultValue = true)]
        public int ClientSentCountAllowance { get; set; }

        /// <summary>
        /// VRChat&#39;s contact email
        /// </summary>
        /// <value>VRChat&#39;s contact email</value>
        [DataMember(Name = "contactEmail", IsRequired = true, EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// VRChat&#39;s copyright-issues-related email
        /// </summary>
        /// <value>VRChat&#39;s copyright-issues-related email</value>
        [DataMember(Name = "copyrightEmail", IsRequired = true, EmitDefaultValue = true)]
        public string CopyrightEmail { get; set; }

        /// <summary>
        /// Current version number of the Terms of Service
        /// </summary>
        /// <value>Current version number of the Terms of Service</value>
        [DataMember(Name = "currentTOSVersion", IsRequired = true, EmitDefaultValue = true)]
        public int CurrentTOSVersion { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAvatar
        /// </summary>
        [DataMember(Name = "defaultAvatar", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultAvatar { get; set; }

        /// <summary>
        /// Version number for game development build
        /// </summary>
        /// <value>Version number for game development build</value>
        [DataMember(Name = "devAppVersionStandalone", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevAppVersionStandalone { get; set; }

        /// <summary>
        /// Developer Download link
        /// </summary>
        /// <value>Developer Download link</value>
        [DataMember(Name = "devDownloadLinkWindows", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevDownloadLinkWindows { get; set; }

        /// <summary>
        /// Link to download the development SDK, use downloadUrls instead
        /// </summary>
        /// <value>Link to download the development SDK, use downloadUrls instead</value>
        [DataMember(Name = "devSdkUrl", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevSdkUrl { get; set; }

        /// <summary>
        /// Version of the development SDK
        /// </summary>
        /// <value>Version of the development SDK</value>
        [DataMember(Name = "devSdkVersion", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevSdkVersion { get; set; }

        /// <summary>
        /// Version number for server development build
        /// </summary>
        /// <value>Version number for server development build</value>
        [DataMember(Name = "devServerVersionStandalone", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string DevServerVersionStandalone { get; set; }

        /// <summary>
        /// Unknown, \&quot;dis\&quot; maybe for disconnect?
        /// </summary>
        /// <value>Unknown, \&quot;dis\&quot; maybe for disconnect?</value>
        [DataMember(Name = "dis-countdown", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DisCountdown { get; set; }

        /// <summary>
        /// Toggles if copying avatars should be disabled
        /// </summary>
        /// <value>Toggles if copying avatars should be disabled</value>
        [DataMember(Name = "disableAvatarCopying", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableAvatarCopying { get; set; }

        /// <summary>
        /// Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag
        /// </summary>
        /// <value>Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag</value>
        [DataMember(Name = "disableAvatarGating", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableAvatarGating { get; set; }

        /// <summary>
        /// Toggles if the Community Labs should be disabled
        /// </summary>
        /// <value>Toggles if the Community Labs should be disabled</value>
        [DataMember(Name = "disableCommunityLabs", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableCommunityLabs { get; set; }

        /// <summary>
        /// Toggles if promotion out of Community Labs should be disabled
        /// </summary>
        /// <value>Toggles if promotion out of Community Labs should be disabled</value>
        [DataMember(Name = "disableCommunityLabsPromotion", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableCommunityLabsPromotion { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "disableEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableEmail { get; set; }

        /// <summary>
        /// Toggles if Analytics should be disabled.
        /// </summary>
        /// <value>Toggles if Analytics should be disabled.</value>
        [DataMember(Name = "disableEventStream", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableEventStream { get; set; }

        /// <summary>
        /// Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag.
        /// </summary>
        /// <value>Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag.</value>
        [DataMember(Name = "disableFeedbackGating", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableFeedbackGating { get; set; }

        /// <summary>
        /// Unknown, probably toggles compilation of frontend web builds? So internal flag?
        /// </summary>
        /// <value>Unknown, probably toggles compilation of frontend web builds? So internal flag?</value>
        [DataMember(Name = "disableFrontendBuilds", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableFrontendBuilds { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "disableHello", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableHello { get; set; }

        /// <summary>
        /// Toggles if signing up for Subscriptions in Oculus is disabled or not.
        /// </summary>
        /// <value>Toggles if signing up for Subscriptions in Oculus is disabled or not.</value>
        [DataMember(Name = "disableOculusSubs", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableOculusSubs { get; set; }

        /// <summary>
        /// Toggles if new user account registration should be disabled.
        /// </summary>
        /// <value>Toggles if new user account registration should be disabled.</value>
        [DataMember(Name = "disableRegistration", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableRegistration { get; set; }

        /// <summary>
        /// Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.
        /// </summary>
        /// <value>Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.</value>
        [DataMember(Name = "disableSteamNetworking", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableSteamNetworking { get; set; }

        /// <summary>
        /// Toggles if 2FA should be disabled.
        /// </summary>
        /// <value>Toggles if 2FA should be disabled.</value>
        [DataMember(Name = "disableTwoFactorAuth", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public bool DisableTwoFactorAuth { get; set; }

        /// <summary>
        /// Toggles if Udon should be universally disabled in-game.
        /// </summary>
        /// <value>Toggles if Udon should be universally disabled in-game.</value>
        [DataMember(Name = "disableUdon", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableUdon { get; set; }

        /// <summary>
        /// Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled.
        /// </summary>
        /// <value>Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled.</value>
        [DataMember(Name = "disableUpgradeAccount", IsRequired = true, EmitDefaultValue = true)]
        public bool DisableUpgradeAccount { get; set; }

        /// <summary>
        /// Download link for game on the Oculus Rift website.
        /// </summary>
        /// <value>Download link for game on the Oculus Rift website.</value>
        [DataMember(Name = "downloadLinkWindows", IsRequired = true, EmitDefaultValue = true)]
        public string DownloadLinkWindows { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrls
        /// </summary>
        [DataMember(Name = "downloadUrls", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigDownloadURLList DownloadUrls { get; set; }

        /// <summary>
        /// Array of DynamicWorldRow objects, used by the game to display the list of world rows
        /// </summary>
        /// <value>Array of DynamicWorldRow objects, used by the game to display the list of world rows</value>
        [DataMember(Name = "dynamicWorldRows", IsRequired = true, EmitDefaultValue = true)]
        public List<DynamicContentRow> DynamicWorldRows { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", IsRequired = true, EmitDefaultValue = true)]
        public APIConfigEvents Events { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "gearDemoRoomId", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string GearDemoRoomId { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "homeWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string HomeWorldId { get; set; }

        /// <summary>
        /// Redirect target if you try to open the base API domain in your browser
        /// </summary>
        /// <value>Redirect target if you try to open the base API domain in your browser</value>
        [DataMember(Name = "homepageRedirectTarget", IsRequired = true, EmitDefaultValue = true)]
        public string HomepageRedirectTarget { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "hubWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string HubWorldId { get; set; }

        /// <summary>
        /// VRChat&#39;s job application email
        /// </summary>
        /// <value>VRChat&#39;s job application email</value>
        [DataMember(Name = "jobsEmail", IsRequired = true, EmitDefaultValue = true)]
        public string JobsEmail { get; set; }

        /// <summary>
        /// MOTD
        /// </summary>
        /// <value>MOTD</value>
        [DataMember(Name = "messageOfTheDay", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string MessageOfTheDay { get; set; }

        /// <summary>
        /// VRChat&#39;s moderation related email
        /// </summary>
        /// <value>VRChat&#39;s moderation related email</value>
        [DataMember(Name = "moderationEmail", IsRequired = true, EmitDefaultValue = true)]
        public string ModerationEmail { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "moderationQueryPeriod", IsRequired = true, EmitDefaultValue = true)]
        public int ModerationQueryPeriod { get; set; }

        /// <summary>
        /// Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds
        /// </summary>
        /// <value>Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds</value>
        [DataMember(Name = "notAllowedToSelectAvatarInPrivateWorldMessage", IsRequired = true, EmitDefaultValue = true)]
        public string NotAllowedToSelectAvatarInPrivateWorldMessage { get; set; }

        /// <summary>
        /// Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance
        /// </summary>
        /// <value>Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance</value>
        [DataMember(Name = "plugin", IsRequired = true, EmitDefaultValue = true)]
        public string Plugin { get; set; }

        /// <summary>
        /// Version number for game release build
        /// </summary>
        /// <value>Version number for game release build</value>
        [DataMember(Name = "releaseAppVersionStandalone", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ReleaseAppVersionStandalone { get; set; }

        /// <summary>
        /// Link to download the release SDK
        /// </summary>
        /// <value>Link to download the release SDK</value>
        [DataMember(Name = "releaseSdkUrl", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ReleaseSdkUrl { get; set; }

        /// <summary>
        /// Version of the release SDK
        /// </summary>
        /// <value>Version of the release SDK</value>
        [DataMember(Name = "releaseSdkVersion", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ReleaseSdkVersion { get; set; }

        /// <summary>
        /// Version number for server release build
        /// </summary>
        /// <value>Version number for server release build</value>
        [DataMember(Name = "releaseServerVersionStandalone", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ReleaseServerVersionStandalone { get; set; }

        /// <summary>
        /// Link to the developer FAQ
        /// </summary>
        /// <value>Link to the developer FAQ</value>
        [DataMember(Name = "sdkDeveloperFaqUrl", IsRequired = true, EmitDefaultValue = true)]
        public string SdkDeveloperFaqUrl { get; set; }

        /// <summary>
        /// Link to the official VRChat Discord
        /// </summary>
        /// <value>Link to the official VRChat Discord</value>
        [DataMember(Name = "sdkDiscordUrl", IsRequired = true, EmitDefaultValue = true)]
        public string SdkDiscordUrl { get; set; }

        /// <summary>
        /// Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet
        /// </summary>
        /// <value>Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet</value>
        [DataMember(Name = "sdkNotAllowedToPublishMessage", IsRequired = true, EmitDefaultValue = true)]
        public string SdkNotAllowedToPublishMessage { get; set; }

        /// <summary>
        /// Unity version supported by the SDK
        /// </summary>
        /// <value>Unity version supported by the SDK</value>
        [DataMember(Name = "sdkUnityVersion", IsRequired = true, EmitDefaultValue = true)]
        public string SdkUnityVersion { get; set; }

        /// <summary>
        /// Server name of the API server currently responding
        /// </summary>
        /// <value>Server name of the API server currently responding</value>
        [DataMember(Name = "serverName", IsRequired = true, EmitDefaultValue = true)]
        public string ServerName { get; set; }

        /// <summary>
        /// VRChat&#39;s support email
        /// </summary>
        /// <value>VRChat&#39;s support email</value>
        [DataMember(Name = "supportEmail", IsRequired = true, EmitDefaultValue = true)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "timeOutWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string TimeOutWorldId { get; set; }

        /// <summary>
        /// WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
        /// </summary>
        /// <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        [DataMember(Name = "tutorialWorldId", IsRequired = true, EmitDefaultValue = true)]
        public string TutorialWorldId { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsMaximum", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsMaximum { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsMinimum", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsMinimum { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsNormal", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsNormal { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "updateRateMsUdonManual", IsRequired = true, EmitDefaultValue = true)]
        public int UpdateRateMsUdonManual { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "uploadAnalysisPercent", IsRequired = true, EmitDefaultValue = true)]
        public int UploadAnalysisPercent { get; set; }

        /// <summary>
        /// List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game
        /// </summary>
        /// <value>List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game</value>
        [DataMember(Name = "urlList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> UrlList { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "useReliableUdpForVoice", IsRequired = true, EmitDefaultValue = true)]
        public bool UseReliableUdpForVoice { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "userUpdatePeriod", IsRequired = true, EmitDefaultValue = true)]
        public int UserUpdatePeriod { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "userVerificationDelay", IsRequired = true, EmitDefaultValue = true)]
        public int UserVerificationDelay { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "userVerificationRetry", IsRequired = true, EmitDefaultValue = true)]
        public int UserVerificationRetry { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "userVerificationTimeout", IsRequired = true, EmitDefaultValue = true)]
        public int UserVerificationTimeout { get; set; }

        /// <summary>
        /// Download link for game on the Steam website.
        /// </summary>
        /// <value>Download link for game on the Steam website.</value>
        [DataMember(Name = "viveWindowsUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ViveWindowsUrl { get; set; }

        /// <summary>
        /// List of allowed URLs that are allowed to host avatar assets
        /// </summary>
        /// <value>List of allowed URLs that are allowed to host avatar assets</value>
        [DataMember(Name = "whiteListedAssetUrls", IsRequired = true, EmitDefaultValue = true)]
        public List<string> WhiteListedAssetUrls { get; set; }

        /// <summary>
        /// Unknown
        /// </summary>
        /// <value>Unknown</value>
        [DataMember(Name = "worldUpdatePeriod", IsRequired = true, EmitDefaultValue = true)]
        public int WorldUpdatePeriod { get; set; }

        /// <summary>
        /// Currently used youtube-dl.exe hash in SHA-256-delimited format
        /// </summary>
        /// <value>Currently used youtube-dl.exe hash in SHA-256-delimited format</value>
        [DataMember(Name = "player-url-resolver-hash", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerUrlResolverHash { get; set; }

        /// <summary>
        /// Currently used youtube-dl.exe version
        /// </summary>
        /// <value>Currently used youtube-dl.exe version</value>
        [DataMember(Name = "player-url-resolver-version", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerUrlResolverVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIConfig {\n");
            sb.Append("  VoiceEnableDegradation: ").Append(VoiceEnableDegradation).Append("\n");
            sb.Append("  VoiceEnableReceiverLimiting: ").Append(VoiceEnableReceiverLimiting).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Announcements: ").Append(Announcements).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  BuildVersionTag: ").Append(BuildVersionTag).Append("\n");
            sb.Append("  ClientApiKey: ").Append(ClientApiKey).Append("\n");
            sb.Append("  ClientBPSCeiling: ").Append(ClientBPSCeiling).Append("\n");
            sb.Append("  ClientDisconnectTimeout: ").Append(ClientDisconnectTimeout).Append("\n");
            sb.Append("  ClientReservedPlayerBPS: ").Append(ClientReservedPlayerBPS).Append("\n");
            sb.Append("  ClientSentCountAllowance: ").Append(ClientSentCountAllowance).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  CopyrightEmail: ").Append(CopyrightEmail).Append("\n");
            sb.Append("  CurrentTOSVersion: ").Append(CurrentTOSVersion).Append("\n");
            sb.Append("  DefaultAvatar: ").Append(DefaultAvatar).Append("\n");
            sb.Append("  DeploymentGroup: ").Append(DeploymentGroup).Append("\n");
            sb.Append("  DevAppVersionStandalone: ").Append(DevAppVersionStandalone).Append("\n");
            sb.Append("  DevDownloadLinkWindows: ").Append(DevDownloadLinkWindows).Append("\n");
            sb.Append("  DevSdkUrl: ").Append(DevSdkUrl).Append("\n");
            sb.Append("  DevSdkVersion: ").Append(DevSdkVersion).Append("\n");
            sb.Append("  DevServerVersionStandalone: ").Append(DevServerVersionStandalone).Append("\n");
            sb.Append("  DisCountdown: ").Append(DisCountdown).Append("\n");
            sb.Append("  DisableAvatarCopying: ").Append(DisableAvatarCopying).Append("\n");
            sb.Append("  DisableAvatarGating: ").Append(DisableAvatarGating).Append("\n");
            sb.Append("  DisableCommunityLabs: ").Append(DisableCommunityLabs).Append("\n");
            sb.Append("  DisableCommunityLabsPromotion: ").Append(DisableCommunityLabsPromotion).Append("\n");
            sb.Append("  DisableEmail: ").Append(DisableEmail).Append("\n");
            sb.Append("  DisableEventStream: ").Append(DisableEventStream).Append("\n");
            sb.Append("  DisableFeedbackGating: ").Append(DisableFeedbackGating).Append("\n");
            sb.Append("  DisableFrontendBuilds: ").Append(DisableFrontendBuilds).Append("\n");
            sb.Append("  DisableHello: ").Append(DisableHello).Append("\n");
            sb.Append("  DisableOculusSubs: ").Append(DisableOculusSubs).Append("\n");
            sb.Append("  DisableRegistration: ").Append(DisableRegistration).Append("\n");
            sb.Append("  DisableSteamNetworking: ").Append(DisableSteamNetworking).Append("\n");
            sb.Append("  DisableTwoFactorAuth: ").Append(DisableTwoFactorAuth).Append("\n");
            sb.Append("  DisableUdon: ").Append(DisableUdon).Append("\n");
            sb.Append("  DisableUpgradeAccount: ").Append(DisableUpgradeAccount).Append("\n");
            sb.Append("  DownloadLinkWindows: ").Append(DownloadLinkWindows).Append("\n");
            sb.Append("  DownloadUrls: ").Append(DownloadUrls).Append("\n");
            sb.Append("  DynamicWorldRows: ").Append(DynamicWorldRows).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  GearDemoRoomId: ").Append(GearDemoRoomId).Append("\n");
            sb.Append("  HomeWorldId: ").Append(HomeWorldId).Append("\n");
            sb.Append("  HomepageRedirectTarget: ").Append(HomepageRedirectTarget).Append("\n");
            sb.Append("  HubWorldId: ").Append(HubWorldId).Append("\n");
            sb.Append("  JobsEmail: ").Append(JobsEmail).Append("\n");
            sb.Append("  MessageOfTheDay: ").Append(MessageOfTheDay).Append("\n");
            sb.Append("  ModerationEmail: ").Append(ModerationEmail).Append("\n");
            sb.Append("  ModerationQueryPeriod: ").Append(ModerationQueryPeriod).Append("\n");
            sb.Append("  NotAllowedToSelectAvatarInPrivateWorldMessage: ").Append(NotAllowedToSelectAvatarInPrivateWorldMessage).Append("\n");
            sb.Append("  Plugin: ").Append(Plugin).Append("\n");
            sb.Append("  ReleaseAppVersionStandalone: ").Append(ReleaseAppVersionStandalone).Append("\n");
            sb.Append("  ReleaseSdkUrl: ").Append(ReleaseSdkUrl).Append("\n");
            sb.Append("  ReleaseSdkVersion: ").Append(ReleaseSdkVersion).Append("\n");
            sb.Append("  ReleaseServerVersionStandalone: ").Append(ReleaseServerVersionStandalone).Append("\n");
            sb.Append("  SdkDeveloperFaqUrl: ").Append(SdkDeveloperFaqUrl).Append("\n");
            sb.Append("  SdkDiscordUrl: ").Append(SdkDiscordUrl).Append("\n");
            sb.Append("  SdkNotAllowedToPublishMessage: ").Append(SdkNotAllowedToPublishMessage).Append("\n");
            sb.Append("  SdkUnityVersion: ").Append(SdkUnityVersion).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  TimeOutWorldId: ").Append(TimeOutWorldId).Append("\n");
            sb.Append("  TutorialWorldId: ").Append(TutorialWorldId).Append("\n");
            sb.Append("  UpdateRateMsMaximum: ").Append(UpdateRateMsMaximum).Append("\n");
            sb.Append("  UpdateRateMsMinimum: ").Append(UpdateRateMsMinimum).Append("\n");
            sb.Append("  UpdateRateMsNormal: ").Append(UpdateRateMsNormal).Append("\n");
            sb.Append("  UpdateRateMsUdonManual: ").Append(UpdateRateMsUdonManual).Append("\n");
            sb.Append("  UploadAnalysisPercent: ").Append(UploadAnalysisPercent).Append("\n");
            sb.Append("  UrlList: ").Append(UrlList).Append("\n");
            sb.Append("  UseReliableUdpForVoice: ").Append(UseReliableUdpForVoice).Append("\n");
            sb.Append("  UserUpdatePeriod: ").Append(UserUpdatePeriod).Append("\n");
            sb.Append("  UserVerificationDelay: ").Append(UserVerificationDelay).Append("\n");
            sb.Append("  UserVerificationRetry: ").Append(UserVerificationRetry).Append("\n");
            sb.Append("  UserVerificationTimeout: ").Append(UserVerificationTimeout).Append("\n");
            sb.Append("  ViveWindowsUrl: ").Append(ViveWindowsUrl).Append("\n");
            sb.Append("  WhiteListedAssetUrls: ").Append(WhiteListedAssetUrls).Append("\n");
            sb.Append("  WorldUpdatePeriod: ").Append(WorldUpdatePeriod).Append("\n");
            sb.Append("  PlayerUrlResolverHash: ").Append(PlayerUrlResolverHash).Append("\n");
            sb.Append("  PlayerUrlResolverVersion: ").Append(PlayerUrlResolverVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIConfig);
        }

        /// <summary>
        /// Returns true if APIConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of APIConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VoiceEnableDegradation == input.VoiceEnableDegradation ||
                    this.VoiceEnableDegradation.Equals(input.VoiceEnableDegradation)
                ) && 
                (
                    this.VoiceEnableReceiverLimiting == input.VoiceEnableReceiverLimiting ||
                    this.VoiceEnableReceiverLimiting.Equals(input.VoiceEnableReceiverLimiting)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Announcements == input.Announcements ||
                    this.Announcements != null &&
                    input.Announcements != null &&
                    this.Announcements.SequenceEqual(input.Announcements)
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.BuildVersionTag == input.BuildVersionTag ||
                    (this.BuildVersionTag != null &&
                    this.BuildVersionTag.Equals(input.BuildVersionTag))
                ) && 
                (
                    this.ClientApiKey == input.ClientApiKey ||
                    (this.ClientApiKey != null &&
                    this.ClientApiKey.Equals(input.ClientApiKey))
                ) && 
                (
                    this.ClientBPSCeiling == input.ClientBPSCeiling ||
                    this.ClientBPSCeiling.Equals(input.ClientBPSCeiling)
                ) && 
                (
                    this.ClientDisconnectTimeout == input.ClientDisconnectTimeout ||
                    this.ClientDisconnectTimeout.Equals(input.ClientDisconnectTimeout)
                ) && 
                (
                    this.ClientReservedPlayerBPS == input.ClientReservedPlayerBPS ||
                    this.ClientReservedPlayerBPS.Equals(input.ClientReservedPlayerBPS)
                ) && 
                (
                    this.ClientSentCountAllowance == input.ClientSentCountAllowance ||
                    this.ClientSentCountAllowance.Equals(input.ClientSentCountAllowance)
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.CopyrightEmail == input.CopyrightEmail ||
                    (this.CopyrightEmail != null &&
                    this.CopyrightEmail.Equals(input.CopyrightEmail))
                ) && 
                (
                    this.CurrentTOSVersion == input.CurrentTOSVersion ||
                    this.CurrentTOSVersion.Equals(input.CurrentTOSVersion)
                ) && 
                (
                    this.DefaultAvatar == input.DefaultAvatar ||
                    (this.DefaultAvatar != null &&
                    this.DefaultAvatar.Equals(input.DefaultAvatar))
                ) && 
                (
                    this.DeploymentGroup == input.DeploymentGroup ||
                    this.DeploymentGroup.Equals(input.DeploymentGroup)
                ) && 
                (
                    this.DevAppVersionStandalone == input.DevAppVersionStandalone ||
                    (this.DevAppVersionStandalone != null &&
                    this.DevAppVersionStandalone.Equals(input.DevAppVersionStandalone))
                ) && 
                (
                    this.DevDownloadLinkWindows == input.DevDownloadLinkWindows ||
                    (this.DevDownloadLinkWindows != null &&
                    this.DevDownloadLinkWindows.Equals(input.DevDownloadLinkWindows))
                ) && 
                (
                    this.DevSdkUrl == input.DevSdkUrl ||
                    (this.DevSdkUrl != null &&
                    this.DevSdkUrl.Equals(input.DevSdkUrl))
                ) && 
                (
                    this.DevSdkVersion == input.DevSdkVersion ||
                    (this.DevSdkVersion != null &&
                    this.DevSdkVersion.Equals(input.DevSdkVersion))
                ) && 
                (
                    this.DevServerVersionStandalone == input.DevServerVersionStandalone ||
                    (this.DevServerVersionStandalone != null &&
                    this.DevServerVersionStandalone.Equals(input.DevServerVersionStandalone))
                ) && 
                (
                    this.DisCountdown == input.DisCountdown ||
                    (this.DisCountdown != null &&
                    this.DisCountdown.Equals(input.DisCountdown))
                ) && 
                (
                    this.DisableAvatarCopying == input.DisableAvatarCopying ||
                    this.DisableAvatarCopying.Equals(input.DisableAvatarCopying)
                ) && 
                (
                    this.DisableAvatarGating == input.DisableAvatarGating ||
                    this.DisableAvatarGating.Equals(input.DisableAvatarGating)
                ) && 
                (
                    this.DisableCommunityLabs == input.DisableCommunityLabs ||
                    this.DisableCommunityLabs.Equals(input.DisableCommunityLabs)
                ) && 
                (
                    this.DisableCommunityLabsPromotion == input.DisableCommunityLabsPromotion ||
                    this.DisableCommunityLabsPromotion.Equals(input.DisableCommunityLabsPromotion)
                ) && 
                (
                    this.DisableEmail == input.DisableEmail ||
                    this.DisableEmail.Equals(input.DisableEmail)
                ) && 
                (
                    this.DisableEventStream == input.DisableEventStream ||
                    this.DisableEventStream.Equals(input.DisableEventStream)
                ) && 
                (
                    this.DisableFeedbackGating == input.DisableFeedbackGating ||
                    this.DisableFeedbackGating.Equals(input.DisableFeedbackGating)
                ) && 
                (
                    this.DisableFrontendBuilds == input.DisableFrontendBuilds ||
                    this.DisableFrontendBuilds.Equals(input.DisableFrontendBuilds)
                ) && 
                (
                    this.DisableHello == input.DisableHello ||
                    this.DisableHello.Equals(input.DisableHello)
                ) && 
                (
                    this.DisableOculusSubs == input.DisableOculusSubs ||
                    this.DisableOculusSubs.Equals(input.DisableOculusSubs)
                ) && 
                (
                    this.DisableRegistration == input.DisableRegistration ||
                    this.DisableRegistration.Equals(input.DisableRegistration)
                ) && 
                (
                    this.DisableSteamNetworking == input.DisableSteamNetworking ||
                    this.DisableSteamNetworking.Equals(input.DisableSteamNetworking)
                ) && 
                (
                    this.DisableTwoFactorAuth == input.DisableTwoFactorAuth ||
                    this.DisableTwoFactorAuth.Equals(input.DisableTwoFactorAuth)
                ) && 
                (
                    this.DisableUdon == input.DisableUdon ||
                    this.DisableUdon.Equals(input.DisableUdon)
                ) && 
                (
                    this.DisableUpgradeAccount == input.DisableUpgradeAccount ||
                    this.DisableUpgradeAccount.Equals(input.DisableUpgradeAccount)
                ) && 
                (
                    this.DownloadLinkWindows == input.DownloadLinkWindows ||
                    (this.DownloadLinkWindows != null &&
                    this.DownloadLinkWindows.Equals(input.DownloadLinkWindows))
                ) && 
                (
                    this.DownloadUrls == input.DownloadUrls ||
                    (this.DownloadUrls != null &&
                    this.DownloadUrls.Equals(input.DownloadUrls))
                ) && 
                (
                    this.DynamicWorldRows == input.DynamicWorldRows ||
                    this.DynamicWorldRows != null &&
                    input.DynamicWorldRows != null &&
                    this.DynamicWorldRows.SequenceEqual(input.DynamicWorldRows)
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                ) && 
                (
                    this.GearDemoRoomId == input.GearDemoRoomId ||
                    (this.GearDemoRoomId != null &&
                    this.GearDemoRoomId.Equals(input.GearDemoRoomId))
                ) && 
                (
                    this.HomeWorldId == input.HomeWorldId ||
                    (this.HomeWorldId != null &&
                    this.HomeWorldId.Equals(input.HomeWorldId))
                ) && 
                (
                    this.HomepageRedirectTarget == input.HomepageRedirectTarget ||
                    (this.HomepageRedirectTarget != null &&
                    this.HomepageRedirectTarget.Equals(input.HomepageRedirectTarget))
                ) && 
                (
                    this.HubWorldId == input.HubWorldId ||
                    (this.HubWorldId != null &&
                    this.HubWorldId.Equals(input.HubWorldId))
                ) && 
                (
                    this.JobsEmail == input.JobsEmail ||
                    (this.JobsEmail != null &&
                    this.JobsEmail.Equals(input.JobsEmail))
                ) && 
                (
                    this.MessageOfTheDay == input.MessageOfTheDay ||
                    (this.MessageOfTheDay != null &&
                    this.MessageOfTheDay.Equals(input.MessageOfTheDay))
                ) && 
                (
                    this.ModerationEmail == input.ModerationEmail ||
                    (this.ModerationEmail != null &&
                    this.ModerationEmail.Equals(input.ModerationEmail))
                ) && 
                (
                    this.ModerationQueryPeriod == input.ModerationQueryPeriod ||
                    this.ModerationQueryPeriod.Equals(input.ModerationQueryPeriod)
                ) && 
                (
                    this.NotAllowedToSelectAvatarInPrivateWorldMessage == input.NotAllowedToSelectAvatarInPrivateWorldMessage ||
                    (this.NotAllowedToSelectAvatarInPrivateWorldMessage != null &&
                    this.NotAllowedToSelectAvatarInPrivateWorldMessage.Equals(input.NotAllowedToSelectAvatarInPrivateWorldMessage))
                ) && 
                (
                    this.Plugin == input.Plugin ||
                    (this.Plugin != null &&
                    this.Plugin.Equals(input.Plugin))
                ) && 
                (
                    this.ReleaseAppVersionStandalone == input.ReleaseAppVersionStandalone ||
                    (this.ReleaseAppVersionStandalone != null &&
                    this.ReleaseAppVersionStandalone.Equals(input.ReleaseAppVersionStandalone))
                ) && 
                (
                    this.ReleaseSdkUrl == input.ReleaseSdkUrl ||
                    (this.ReleaseSdkUrl != null &&
                    this.ReleaseSdkUrl.Equals(input.ReleaseSdkUrl))
                ) && 
                (
                    this.ReleaseSdkVersion == input.ReleaseSdkVersion ||
                    (this.ReleaseSdkVersion != null &&
                    this.ReleaseSdkVersion.Equals(input.ReleaseSdkVersion))
                ) && 
                (
                    this.ReleaseServerVersionStandalone == input.ReleaseServerVersionStandalone ||
                    (this.ReleaseServerVersionStandalone != null &&
                    this.ReleaseServerVersionStandalone.Equals(input.ReleaseServerVersionStandalone))
                ) && 
                (
                    this.SdkDeveloperFaqUrl == input.SdkDeveloperFaqUrl ||
                    (this.SdkDeveloperFaqUrl != null &&
                    this.SdkDeveloperFaqUrl.Equals(input.SdkDeveloperFaqUrl))
                ) && 
                (
                    this.SdkDiscordUrl == input.SdkDiscordUrl ||
                    (this.SdkDiscordUrl != null &&
                    this.SdkDiscordUrl.Equals(input.SdkDiscordUrl))
                ) && 
                (
                    this.SdkNotAllowedToPublishMessage == input.SdkNotAllowedToPublishMessage ||
                    (this.SdkNotAllowedToPublishMessage != null &&
                    this.SdkNotAllowedToPublishMessage.Equals(input.SdkNotAllowedToPublishMessage))
                ) && 
                (
                    this.SdkUnityVersion == input.SdkUnityVersion ||
                    (this.SdkUnityVersion != null &&
                    this.SdkUnityVersion.Equals(input.SdkUnityVersion))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.TimeOutWorldId == input.TimeOutWorldId ||
                    (this.TimeOutWorldId != null &&
                    this.TimeOutWorldId.Equals(input.TimeOutWorldId))
                ) && 
                (
                    this.TutorialWorldId == input.TutorialWorldId ||
                    (this.TutorialWorldId != null &&
                    this.TutorialWorldId.Equals(input.TutorialWorldId))
                ) && 
                (
                    this.UpdateRateMsMaximum == input.UpdateRateMsMaximum ||
                    this.UpdateRateMsMaximum.Equals(input.UpdateRateMsMaximum)
                ) && 
                (
                    this.UpdateRateMsMinimum == input.UpdateRateMsMinimum ||
                    this.UpdateRateMsMinimum.Equals(input.UpdateRateMsMinimum)
                ) && 
                (
                    this.UpdateRateMsNormal == input.UpdateRateMsNormal ||
                    this.UpdateRateMsNormal.Equals(input.UpdateRateMsNormal)
                ) && 
                (
                    this.UpdateRateMsUdonManual == input.UpdateRateMsUdonManual ||
                    this.UpdateRateMsUdonManual.Equals(input.UpdateRateMsUdonManual)
                ) && 
                (
                    this.UploadAnalysisPercent == input.UploadAnalysisPercent ||
                    this.UploadAnalysisPercent.Equals(input.UploadAnalysisPercent)
                ) && 
                (
                    this.UrlList == input.UrlList ||
                    this.UrlList != null &&
                    input.UrlList != null &&
                    this.UrlList.SequenceEqual(input.UrlList)
                ) && 
                (
                    this.UseReliableUdpForVoice == input.UseReliableUdpForVoice ||
                    this.UseReliableUdpForVoice.Equals(input.UseReliableUdpForVoice)
                ) && 
                (
                    this.UserUpdatePeriod == input.UserUpdatePeriod ||
                    this.UserUpdatePeriod.Equals(input.UserUpdatePeriod)
                ) && 
                (
                    this.UserVerificationDelay == input.UserVerificationDelay ||
                    this.UserVerificationDelay.Equals(input.UserVerificationDelay)
                ) && 
                (
                    this.UserVerificationRetry == input.UserVerificationRetry ||
                    this.UserVerificationRetry.Equals(input.UserVerificationRetry)
                ) && 
                (
                    this.UserVerificationTimeout == input.UserVerificationTimeout ||
                    this.UserVerificationTimeout.Equals(input.UserVerificationTimeout)
                ) && 
                (
                    this.ViveWindowsUrl == input.ViveWindowsUrl ||
                    (this.ViveWindowsUrl != null &&
                    this.ViveWindowsUrl.Equals(input.ViveWindowsUrl))
                ) && 
                (
                    this.WhiteListedAssetUrls == input.WhiteListedAssetUrls ||
                    this.WhiteListedAssetUrls != null &&
                    input.WhiteListedAssetUrls != null &&
                    this.WhiteListedAssetUrls.SequenceEqual(input.WhiteListedAssetUrls)
                ) && 
                (
                    this.WorldUpdatePeriod == input.WorldUpdatePeriod ||
                    this.WorldUpdatePeriod.Equals(input.WorldUpdatePeriod)
                ) && 
                (
                    this.PlayerUrlResolverHash == input.PlayerUrlResolverHash ||
                    (this.PlayerUrlResolverHash != null &&
                    this.PlayerUrlResolverHash.Equals(input.PlayerUrlResolverHash))
                ) && 
                (
                    this.PlayerUrlResolverVersion == input.PlayerUrlResolverVersion ||
                    (this.PlayerUrlResolverVersion != null &&
                    this.PlayerUrlResolverVersion.Equals(input.PlayerUrlResolverVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VoiceEnableDegradation.GetHashCode();
                hashCode = (hashCode * 59) + this.VoiceEnableReceiverLimiting.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Announcements != null)
                {
                    hashCode = (hashCode * 59) + this.Announcements.GetHashCode();
                }
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.BuildVersionTag != null)
                {
                    hashCode = (hashCode * 59) + this.BuildVersionTag.GetHashCode();
                }
                if (this.ClientApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ClientApiKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientBPSCeiling.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientDisconnectTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientReservedPlayerBPS.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientSentCountAllowance.GetHashCode();
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.CopyrightEmail != null)
                {
                    hashCode = (hashCode * 59) + this.CopyrightEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentTOSVersion.GetHashCode();
                if (this.DefaultAvatar != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultAvatar.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeploymentGroup.GetHashCode();
                if (this.DevAppVersionStandalone != null)
                {
                    hashCode = (hashCode * 59) + this.DevAppVersionStandalone.GetHashCode();
                }
                if (this.DevDownloadLinkWindows != null)
                {
                    hashCode = (hashCode * 59) + this.DevDownloadLinkWindows.GetHashCode();
                }
                if (this.DevSdkUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DevSdkUrl.GetHashCode();
                }
                if (this.DevSdkVersion != null)
                {
                    hashCode = (hashCode * 59) + this.DevSdkVersion.GetHashCode();
                }
                if (this.DevServerVersionStandalone != null)
                {
                    hashCode = (hashCode * 59) + this.DevServerVersionStandalone.GetHashCode();
                }
                if (this.DisCountdown != null)
                {
                    hashCode = (hashCode * 59) + this.DisCountdown.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableAvatarCopying.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableAvatarGating.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCommunityLabs.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableCommunityLabsPromotion.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableEventStream.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableFeedbackGating.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableFrontendBuilds.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableHello.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableOculusSubs.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableRegistration.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableSteamNetworking.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableTwoFactorAuth.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableUdon.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableUpgradeAccount.GetHashCode();
                if (this.DownloadLinkWindows != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadLinkWindows.GetHashCode();
                }
                if (this.DownloadUrls != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadUrls.GetHashCode();
                }
                if (this.DynamicWorldRows != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicWorldRows.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.GearDemoRoomId != null)
                {
                    hashCode = (hashCode * 59) + this.GearDemoRoomId.GetHashCode();
                }
                if (this.HomeWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.HomeWorldId.GetHashCode();
                }
                if (this.HomepageRedirectTarget != null)
                {
                    hashCode = (hashCode * 59) + this.HomepageRedirectTarget.GetHashCode();
                }
                if (this.HubWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.HubWorldId.GetHashCode();
                }
                if (this.JobsEmail != null)
                {
                    hashCode = (hashCode * 59) + this.JobsEmail.GetHashCode();
                }
                if (this.MessageOfTheDay != null)
                {
                    hashCode = (hashCode * 59) + this.MessageOfTheDay.GetHashCode();
                }
                if (this.ModerationEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ModerationEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModerationQueryPeriod.GetHashCode();
                if (this.NotAllowedToSelectAvatarInPrivateWorldMessage != null)
                {
                    hashCode = (hashCode * 59) + this.NotAllowedToSelectAvatarInPrivateWorldMessage.GetHashCode();
                }
                if (this.Plugin != null)
                {
                    hashCode = (hashCode * 59) + this.Plugin.GetHashCode();
                }
                if (this.ReleaseAppVersionStandalone != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseAppVersionStandalone.GetHashCode();
                }
                if (this.ReleaseSdkUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseSdkUrl.GetHashCode();
                }
                if (this.ReleaseSdkVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseSdkVersion.GetHashCode();
                }
                if (this.ReleaseServerVersionStandalone != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseServerVersionStandalone.GetHashCode();
                }
                if (this.SdkDeveloperFaqUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SdkDeveloperFaqUrl.GetHashCode();
                }
                if (this.SdkDiscordUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SdkDiscordUrl.GetHashCode();
                }
                if (this.SdkNotAllowedToPublishMessage != null)
                {
                    hashCode = (hashCode * 59) + this.SdkNotAllowedToPublishMessage.GetHashCode();
                }
                if (this.SdkUnityVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SdkUnityVersion.GetHashCode();
                }
                if (this.ServerName != null)
                {
                    hashCode = (hashCode * 59) + this.ServerName.GetHashCode();
                }
                if (this.SupportEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SupportEmail.GetHashCode();
                }
                if (this.TimeOutWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.TimeOutWorldId.GetHashCode();
                }
                if (this.TutorialWorldId != null)
                {
                    hashCode = (hashCode * 59) + this.TutorialWorldId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateRateMsMaximum.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateRateMsMinimum.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateRateMsNormal.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateRateMsUdonManual.GetHashCode();
                hashCode = (hashCode * 59) + this.UploadAnalysisPercent.GetHashCode();
                if (this.UrlList != null)
                {
                    hashCode = (hashCode * 59) + this.UrlList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseReliableUdpForVoice.GetHashCode();
                hashCode = (hashCode * 59) + this.UserUpdatePeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.UserVerificationDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.UserVerificationRetry.GetHashCode();
                hashCode = (hashCode * 59) + this.UserVerificationTimeout.GetHashCode();
                if (this.ViveWindowsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ViveWindowsUrl.GetHashCode();
                }
                if (this.WhiteListedAssetUrls != null)
                {
                    hashCode = (hashCode * 59) + this.WhiteListedAssetUrls.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorldUpdatePeriod.GetHashCode();
                if (this.PlayerUrlResolverHash != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerUrlResolverHash.GetHashCode();
                }
                if (this.PlayerUrlResolverVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerUrlResolverVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be greater than 1.", new [] { "Address" });
            }

            // AppName (string) minLength
            if (this.AppName != null && this.AppName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppName, length must be greater than 1.", new [] { "AppName" });
            }

            // BuildVersionTag (string) minLength
            if (this.BuildVersionTag != null && this.BuildVersionTag.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BuildVersionTag, length must be greater than 1.", new [] { "BuildVersionTag" });
            }

            // ClientApiKey (string) minLength
            if (this.ClientApiKey != null && this.ClientApiKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientApiKey, length must be greater than 1.", new [] { "ClientApiKey" });
            }

            // ContactEmail (string) minLength
            if (this.ContactEmail != null && this.ContactEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmail, length must be greater than 1.", new [] { "ContactEmail" });
            }

            // CopyrightEmail (string) minLength
            if (this.CopyrightEmail != null && this.CopyrightEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CopyrightEmail, length must be greater than 1.", new [] { "CopyrightEmail" });
            }

            // CurrentTOSVersion (int) minimum
            if (this.CurrentTOSVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentTOSVersion, must be a value greater than or equal to 0.", new [] { "CurrentTOSVersion" });
            }

            // DevAppVersionStandalone (string) minLength
            if (this.DevAppVersionStandalone != null && this.DevAppVersionStandalone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevAppVersionStandalone, length must be greater than 1.", new [] { "DevAppVersionStandalone" });
            }

            // DevDownloadLinkWindows (string) minLength
            if (this.DevDownloadLinkWindows != null && this.DevDownloadLinkWindows.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevDownloadLinkWindows, length must be greater than 1.", new [] { "DevDownloadLinkWindows" });
            }

            // DevSdkUrl (string) minLength
            if (this.DevSdkUrl != null && this.DevSdkUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevSdkUrl, length must be greater than 1.", new [] { "DevSdkUrl" });
            }

            // DevSdkVersion (string) minLength
            if (this.DevSdkVersion != null && this.DevSdkVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevSdkVersion, length must be greater than 1.", new [] { "DevSdkVersion" });
            }

            // DevServerVersionStandalone (string) minLength
            if (this.DevServerVersionStandalone != null && this.DevServerVersionStandalone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DevServerVersionStandalone, length must be greater than 1.", new [] { "DevServerVersionStandalone" });
            }

            // DownloadLinkWindows (string) minLength
            if (this.DownloadLinkWindows != null && this.DownloadLinkWindows.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DownloadLinkWindows, length must be greater than 1.", new [] { "DownloadLinkWindows" });
            }

            // GearDemoRoomId (string) minLength
            if (this.GearDemoRoomId != null && this.GearDemoRoomId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GearDemoRoomId, length must be greater than 1.", new [] { "GearDemoRoomId" });
            }

            // HomepageRedirectTarget (string) minLength
            if (this.HomepageRedirectTarget != null && this.HomepageRedirectTarget.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomepageRedirectTarget, length must be greater than 1.", new [] { "HomepageRedirectTarget" });
            }

            // JobsEmail (string) minLength
            if (this.JobsEmail != null && this.JobsEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobsEmail, length must be greater than 1.", new [] { "JobsEmail" });
            }

            // MessageOfTheDay (string) minLength
            if (this.MessageOfTheDay != null && this.MessageOfTheDay.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MessageOfTheDay, length must be greater than 1.", new [] { "MessageOfTheDay" });
            }

            // ModerationEmail (string) minLength
            if (this.ModerationEmail != null && this.ModerationEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModerationEmail, length must be greater than 1.", new [] { "ModerationEmail" });
            }

            // NotAllowedToSelectAvatarInPrivateWorldMessage (string) minLength
            if (this.NotAllowedToSelectAvatarInPrivateWorldMessage != null && this.NotAllowedToSelectAvatarInPrivateWorldMessage.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotAllowedToSelectAvatarInPrivateWorldMessage, length must be greater than 1.", new [] { "NotAllowedToSelectAvatarInPrivateWorldMessage" });
            }

            // Plugin (string) minLength
            if (this.Plugin != null && this.Plugin.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Plugin, length must be greater than 1.", new [] { "Plugin" });
            }

            // ReleaseAppVersionStandalone (string) minLength
            if (this.ReleaseAppVersionStandalone != null && this.ReleaseAppVersionStandalone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseAppVersionStandalone, length must be greater than 1.", new [] { "ReleaseAppVersionStandalone" });
            }

            // ReleaseSdkUrl (string) minLength
            if (this.ReleaseSdkUrl != null && this.ReleaseSdkUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseSdkUrl, length must be greater than 1.", new [] { "ReleaseSdkUrl" });
            }

            // ReleaseSdkVersion (string) minLength
            if (this.ReleaseSdkVersion != null && this.ReleaseSdkVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseSdkVersion, length must be greater than 1.", new [] { "ReleaseSdkVersion" });
            }

            // ReleaseServerVersionStandalone (string) minLength
            if (this.ReleaseServerVersionStandalone != null && this.ReleaseServerVersionStandalone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReleaseServerVersionStandalone, length must be greater than 1.", new [] { "ReleaseServerVersionStandalone" });
            }

            // SdkDeveloperFaqUrl (string) minLength
            if (this.SdkDeveloperFaqUrl != null && this.SdkDeveloperFaqUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkDeveloperFaqUrl, length must be greater than 1.", new [] { "SdkDeveloperFaqUrl" });
            }

            // SdkDiscordUrl (string) minLength
            if (this.SdkDiscordUrl != null && this.SdkDiscordUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkDiscordUrl, length must be greater than 1.", new [] { "SdkDiscordUrl" });
            }

            // SdkNotAllowedToPublishMessage (string) minLength
            if (this.SdkNotAllowedToPublishMessage != null && this.SdkNotAllowedToPublishMessage.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkNotAllowedToPublishMessage, length must be greater than 1.", new [] { "SdkNotAllowedToPublishMessage" });
            }

            // SdkUnityVersion (string) minLength
            if (this.SdkUnityVersion != null && this.SdkUnityVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkUnityVersion, length must be greater than 1.", new [] { "SdkUnityVersion" });
            }

            // ServerName (string) minLength
            if (this.ServerName != null && this.ServerName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerName, length must be greater than 1.", new [] { "ServerName" });
            }

            // SupportEmail (string) minLength
            if (this.SupportEmail != null && this.SupportEmail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupportEmail, length must be greater than 1.", new [] { "SupportEmail" });
            }

            // ViveWindowsUrl (string) minLength
            if (this.ViveWindowsUrl != null && this.ViveWindowsUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ViveWindowsUrl, length must be greater than 1.", new [] { "ViveWindowsUrl" });
            }

            // PlayerUrlResolverHash (string) minLength
            if (this.PlayerUrlResolverHash != null && this.PlayerUrlResolverHash.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlayerUrlResolverHash, length must be greater than 1.", new [] { "PlayerUrlResolverHash" });
            }

            // PlayerUrlResolverVersion (string) minLength
            if (this.PlayerUrlResolverVersion != null && this.PlayerUrlResolverVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlayerUrlResolverVersion, length must be greater than 1.", new [] { "PlayerUrlResolverVersion" });
            }

            yield break;
        }
    }

}
